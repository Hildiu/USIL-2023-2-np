# -*- coding: utf-8 -*-
"""Sesión 1. Tratamiento de Datos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hUbcgQYTs9ArPBpwr6ghvEqI35gY_PaA

# 1. Arrays

# 1.1. Arrays con NumPy

Array es una matriz unidimensional.
NumPy es un paquete de Python creado por Travis Oliphant con propósitos científicos.
Array en NumPy consume menos memoria y por ende es más rápido que una lista de Python.
"""

# Importar la librería NumPy
import numpy as np

# Creamos un array en Python
n_array = np.array([[0, 1, 2, 3],[4, 5, 6, 7],[8, 9, 10, 11]])
print(n_array)

# Número de dimensiones del array
#print("\nNumero de dimensiones del array")
#print(n_array.ndim)

# Tamaño de cada dimensión
#print("\nTamanio de cada dimension")
#print(n_array.shape)

# Número de elementos
#print("\nNumero de elementos")
#print(n_array.size)


# Tipo de datos
#print("\ntipo de dato")
#print(n_array.dtype.name)
#print()
"""# 1.2. Operaciones Matemáticas con NumPy"""

# Adición y sustracción de matrices
#print("Operaciones con matrices")
#a = np.array( [11, 12, 13, 14])
#b = np.array( [ 1, 2, 3, 4])
#print(a)
#print(b)
#print("Diferencia")
#c = a - b
#print(c)

#print()
#print("Suma")
#d = a + b
#print(d)

# Potencia de arrays.
#print()
#print("Potencia")
#print(b)
#b**2
#print(b**2)


# Funciones sobre los arrays.
#print("\nFunciones sobre arrays")
#print(np.cos(b))

# Multiplicación de matrices
#print("Multiplicacion de matrices")
#A1 = np.array([[1, 1],[0, 1]])
#A2 = np.array([[2, 0],[3, 4]])
#print(A1)
#print()
#print(A2)
#print()
#a3 = A1*A2
#print(a3)


"""# 1.3. Indexing and Slicing"""

#print("\nSlicing")
#A1 = np.array([[0,1,2,3,4,5],[10,11,12,13,14,15],[20,21,22,23,24,25], [30,31,32,33,34,35]])
#print(A1)
#print()
# Seleccionamos la fila 1 y la columna 2
#print("A1[0,1]")
#print(A1[0,1])

# Seleccionamos la fila 1 y las 3 primeras columnas.
#print()
#print("A1[ 0 , 0:3 ]")
#print(A1[ 0 , 0:3 ])

# Seleccionamos la fila 1 y todas las columnas.
#print()
#print("Seleccionamos la fila 0 y todas las columnas.")
#print("A1[ 0 , : ]")
#print(A1[ 0 , : ])

# Seleccionamos todas las filas y la columna 1.
#print()
#print("Seleccionamos todas las filas y la columna 1.")
#print("A1[ : , 1 ]")
#print(A1[ : , 1])


# Transpuesta de un array.
#print()
#print("Transpuesta de un array")
#print("A1.transpose()")
#print(A1.transpose())

"""# 2. Análisis de datos con Pandas

La librería Pandas desarrollada para el análisis. Fue desarrollada en NumPy. La librería Pandas trae la riqueza de R al mundo de Python. Tiene eficiente estructuras de datos para procesar los datos, unir datos y leerlos de varias fuentes.

# 2.1. Series
"""
#print()
# Importar la librería Pandas desde Python.
#import pandas as pd

# Creación de una serie a partir de 5 números aleatorios.
#print(pd.Series(np.random.randn(5)))
#print()
#print(pd.Series(np.random.randn(5), index=['a', 'b', 'c', 'd', 'e']))
#print()
"""# 2.2. Data Frames"""

# Data Frames que provienen de diccionarios de series.
#d = {'c1': pd.Series(['A', 'B', 'C']),'c2': pd.Series([1., 2., 3., 4.])}
#df = pd.DataFrame(d)
#print(df)

# Data Frames que provienen de diccionarios de listas.
#print()
#d = {'c1': ['A', 'B', 'C', 'D'],'c2': [1.0, 2.0, 3.0, 4.0]}
#df = pd.DataFrame(d)
#print(df)
